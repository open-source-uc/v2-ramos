---
import { ContentPage } from '@/components/common'
import { ClockIcon, EditIcon } from '@/components/icons/icons'
import { MarkdownReviewView } from '@/components/reviews/MarkdownReviewView'
import Layout from '@/layouts/Layout.astro'
import { getToken } from '@/lib/auth'
import config from '@/lib/const'
import { getUserDataByToken } from '@/lib/server/auth'
import { createSlug } from '@/lib/utils'
import type { Organization, Recommendations } from '@/types'
import { OsucPermissions } from '@/types/permissions'

export const prerender = true

export async function getStaticPaths() {
	const response = await fetch(new URL('/api/articles/recommendations', config.BASEURL))
	const recommendations: Recommendations[] = await response.json()
	return recommendations.map((recommendation) => ({
		params: {
			author: createSlug(recommendation.organization_name),
			title: createSlug(recommendation.title),
		},
		props: { recommendation },
	}))
}

const { recommendation } = Astro.props
const organizationRes = await fetch(
	`http://localhost:4322/api/organization/${recommendation.organization_id}`
)
const organizationData = (await organizationRes.json()) as Organization
const token = getToken(Astro.cookies)
const userData = await getUserDataByToken(token)
let showButton = false
if (token) {
	showButton =
		Number(userData?.id) === recommendation.user_id ||
		(Array.isArray(userData?.permissions) &&
			userData.permissions.includes(OsucPermissions.userIsRoot))
}
---

<Layout>
	<ContentPage
		contentData={recommendation}
		organizationData={organizationData}
		contentType="recommendation"
		primaryPillIcon={EditIcon}
		secondaryPillIcon={ClockIcon}
		navigationSection={{
			title: '¿Te gustó esta recomendación?',
			description:
				'Descubre más contenido interesante en las recomendaciones que tenemos para ofrecerte.',
			buttonText: 'Ver Más Recomendaciones',
			buttonHref: '/recommendations',
		}}
	>
		<MarkdownReviewView path={recommendation.content_path} client:load />
	</ContentPage>
</Layout>
