---
export interface Props {
	name?: string
	label?: string
	description?: string
	tags: string[]
	selectedTags?: string[]
	placeholder?: string
	required?: boolean
	class?: string
}

const {
	name = 'tags',
	label = 'Tags',
	description,
	tags,
	selectedTags = [],
	placeholder = 'Selecciona las etiquetas...',
	required = false,
	class: className = '',
} = Astro.props

const componentId = `tag-selector-${Math.random().toString(36).substr(2, 9)}`
---

<div class={`space-y-2 min-w-0 ${className}`}>
	{
		label && (
			<label class="text-foreground block text-sm font-medium">
				{label} {required && <span class="text-red-500">*</span>}
			</label>
		)
	}

	{description && <p class="text-muted-foreground mb-3 text-xs">{description}</p>}

	<!-- Selector de tags con dropdown -->
	<div class="relative" id={componentId}>
		<!-- Input principal que muestra las tags seleccionadas -->
		<div
			class="border-border bg-background text-foreground placeholder:text-muted-foreground focus:ring-ring flex min-h-[44px] w-full min-w-0 cursor-pointer flex-wrap items-center gap-1 rounded-lg border px-3 py-2 transition-all duration-200 focus:border-transparent focus:ring-2 focus:outline-none sm:px-4 sm:py-3"
			data-tags-input
			tabindex="0"
		>
			<span class="text-muted-foreground select-none" data-tags-placeholder>
				{placeholder}
			</span>
			<div class="flex flex-wrap gap-1" data-selected-tags></div>
		</div>

		<!-- Dropdown con las opciones -->
		<div
			class="bg-background border-border absolute z-50 mt-1 hidden max-h-60 w-full overflow-y-auto rounded-lg border shadow-lg"
			data-tags-dropdown
		>
			<div class="space-y-1 p-2">
				{
					tags.map((tag) => (
						<div
							class="hover:bg-muted tag-option cursor-pointer rounded-md px-3 py-2 text-sm transition-colors duration-200"
							data-tag={tag}
						>
							{tag}
						</div>
					))
				}
			</div>
		</div>

		<!-- Inputs ocultos para enviar los datos -->
		<div data-hidden-inputs></div>
	</div>
</div>

<script define:vars={{ componentId, selectedTags, name }}>
	document.addEventListener('DOMContentLoaded', function () {
		const container = document.getElementById(componentId)
		if (!container) return

		const tagsInput = container.querySelector('[data-tags-input]')
		const tagsDropdown = container.querySelector('[data-tags-dropdown]')
		const selectedTagsContainer = container.querySelector('[data-selected-tags]')
		const hiddenInputsContainer = container.querySelector('[data-hidden-inputs]')
		const placeholder = container.querySelector('[data-tags-placeholder]')
		const tagOptions = container.querySelectorAll('.tag-option')

		if (
			!tagsInput ||
			!tagsDropdown ||
			!selectedTagsContainer ||
			!hiddenInputsContainer ||
			!placeholder
		) {
			return
		}

		let currentSelectedTags = [...selectedTags]

		// Función para actualizar la visualización de tags seleccionadas
		function updateSelectedTags() {
			selectedTagsContainer.innerHTML = ''
			hiddenInputsContainer.innerHTML = ''

			if (currentSelectedTags.length === 0) {
				placeholder.style.display = 'block'
			} else {
				placeholder.style.display = 'none'

				currentSelectedTags.forEach(function (tag) {
					// Crear la etiqueta visual
					const tagElement = document.createElement('span')
					tagElement.className =
						'inline-flex items-center gap-1 px-2 py-1 bg-primary/10 text-primary border border-primary/20 rounded-md text-sm'
					tagElement.innerHTML =
						tag +
						'<button type="button" class="ml-1 text-primary/70 hover:text-primary remove-tag" data-tag="' +
						tag +
						'">×</button>'
					selectedTagsContainer.appendChild(tagElement)
				})

				// Crear un solo input oculto con todas las tags separadas por coma
				const hiddenInput = document.createElement('input')
				hiddenInput.type = 'hidden'
				hiddenInput.name = name
				hiddenInput.value = currentSelectedTags.join(',')
				hiddenInputsContainer.appendChild(hiddenInput)

				// Agregar event listeners a los botones de remover
				container.querySelectorAll('.remove-tag').forEach(function (button) {
					button.addEventListener('click', function (e) {
						e.stopPropagation()
						const tag = this.getAttribute('data-tag')
						currentSelectedTags = currentSelectedTags.filter(function (t) {
							return t !== tag
						})
						updateSelectedTags()
					})
				})
			}

			// Actualizar opciones del dropdown
			tagOptions.forEach(function (option) {
				const tag = option.getAttribute('data-tag')
				if (tag && currentSelectedTags.includes(tag)) {
					option.classList.add('bg-primary/10', 'text-primary')
				} else {
					option.classList.remove('bg-primary/10', 'text-primary')
				}
			})
		}

		// Mostrar/ocultar dropdown
		tagsInput.addEventListener('click', function (e) {
			e.stopPropagation()
			tagsDropdown.classList.toggle('hidden')
		})

		// Manejar selección de tags
		tagOptions.forEach(function (option) {
			option.addEventListener('click', function (e) {
				e.stopPropagation()
				const tag = this.getAttribute('data-tag')

				if (tag) {
					if (currentSelectedTags.includes(tag)) {
						currentSelectedTags = currentSelectedTags.filter(function (t) {
							return t !== tag
						})
					} else {
						currentSelectedTags.push(tag)
					}

					updateSelectedTags()
				}
			})
		})

		// Cerrar dropdown al hacer click fuera
		document.addEventListener('click', function (e) {
			const target = e.target
			if (target && target instanceof Element && !container.contains(target)) {
				tagsDropdown.classList.add('hidden')
			}
		})

		// Manejar teclas
		tagsInput.addEventListener('keydown', function (e) {
			if (e.key === 'Enter' || e.key === ' ') {
				e.preventDefault()
				tagsDropdown.classList.toggle('hidden')
			}
			if (e.key === 'Escape') {
				tagsDropdown.classList.add('hidden')
			}
		})

		// Inicializar
		updateSelectedTags()
	})
</script>
