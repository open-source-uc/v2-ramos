---
import type { Blogs, Recommendations, Organization } from "@/types";
import { Pill } from "../ui/pill";

interface Props {
  contentData: Blogs | Recommendations;
  organizationData: Organization;
  contentType: "resource" | "blog" | "recommendation";
  primaryPillIcon?: any;
  secondaryPillIcon?: any;
  navigationSection?: {
    title: string;
    description: string;
    buttonText: string;
    buttonHref: string;
  };
  showEditButton?: boolean;
}
let { showEditButton } = Astro.props;
const {
  contentData,
  organizationData,
  contentType,
  primaryPillIcon,
  secondaryPillIcon,
  navigationSection,
} = Astro.props;

const isRecommendation = contentType === "recommendation";
const isBlog = contentType === "blog";
const isResource = contentType === "resource";

// Etiquetas y campos según tipo
const contentTypeLabel = isResource
  ? "Recurso"
  : isBlog
    ? "Blog"
    : "Recomendación";

const tags =
  isBlog || isResource
    ? (contentData as Blogs).tags
      ? (contentData as Blogs).tags.split(",").map((tag: string) => tag.trim())
      : []
    : [];

// Para recomendaciones, mostrar campos extra
const recommendationFields = isRecommendation
  ? {
      faculty: (contentData as Recommendations).faculty,
      code: (contentData as Recommendations).code,
      qualification: (contentData as Recommendations).qualification,
    }
  : null;

// Default navigation section
const defaultNavigationSection = isResource
  ? {
      title: "¿Te resultó útil este recurso?",
      description: "Explora más recursos y guías en nuestra sección de ayuda.",
      buttonText: "Ver Todos los Recursos",
      buttonHref: "/resources",
    }
  : isBlog
    ? {
        title: "¿Te gustó este blog?",
        description: "Descubre más artículos y contenido en nuestro blog.",
        buttonText: "Ver Todos los Blogs",
        buttonHref: "/blogs",
      }
    : {
        title: "¿Te resultó útil esta recomendación?",
        description:
          "Explora más recomendaciones de cursos y experiencias estudiantiles.",
        buttonText: "Ver Todas las Recomendaciones",
        buttonHref: "/recommendations",
      };

const finalNavigationSection = navigationSection || defaultNavigationSection;
showEditButton = false;
---

<div class="flex flex-col gap-4 max-w-4xl mx-auto px-4 sm:px-6 py-8 w-full">
  <!-- Header Section -->
  <a
    class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 hover:underline transition-colors"
    href={isRecommendation ? "/recommendations" : `/${contentType}s`}
  >
    ← Ver más {contentTypeLabel}s
  </a>
  <!-- Encabezado: título y metadatos -->
  <header
    class="border border-border rounded-md px-4 sm:px-6 py-6 sm:py-8 mb-4"
  >
    <div class="flex items-center justify-between gap-4">
      <h1 class="text-2xl sm:text-3xl font-bold pb-4 break-words">
        {contentData.title}
      </h1>
      {
        showEditButton && (
          <a
            href="#"
            class="inline-flex items-center gap-2 px-3 py-1.5 rounded-md border border-blue-600 text-blue-600 hover:bg-blue-50 transition-colors text-sm font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            aria-label="Editar reseña"
          >
            ✏️ Editar
          </a>
        )
      }
    </div>
    <div class="flex items-center gap-3 mt-2 overflow-hidden">
      <a
        href={`/${organizationData.page_link}` || "#"}
        target="_blank"
        rel="noopener noreferrer"
        class="block"
      >
        <img
          src={organizationData.logo_url}
          alt={`Logo de ${organizationData.organization_name}`}
          class="w-10 h-10 rounded-full object-cover border-2 border-border hover:border-blue transition-colors"
        />
      </a>
      <div class="flex flex-col min-w-0">
        <div class="text-sm text-muted-foreground truncate">
          Por
          <a
            href={`/${organizationData.page_link}`}
            target="_blank"
            rel="noopener noreferrer"
            class="font-medium text-foreground hover:text-blue transition-colors"
          >
            {organizationData.organization_name}
          </a>
        </div>
        <div class="flex flex-wrap gap-2 text-xs text-muted-foreground mt-1">
          <span
            >Autor: <span class="text-foreground">{contentData.user_name}</span
            ></span
          >
          {
            isBlog && (
              <span>
                Rol:{" "}
                <span class="text-foreground">
                  {(contentData as Blogs).user_role}
                </span>
              </span>
            )
          }
          {
            isRecommendation && (
              <span>
                Facultad:{" "}
                <span class="text-foreground">
                  {(contentData as Recommendations).faculty}
                </span>
              </span>
            )
          }
          {
            contentData.period_time && (
              <span>
                Periodo:{" "}
                <span class="text-foreground">{contentData.period_time}</span>
              </span>
            )
          }
          {
            contentData.created_at && (
              <span>
                Creado:{" "}
                <span class="text-foreground">
                  {new Date(contentData.created_at).toLocaleDateString()}
                </span>
              </span>
            )
          }
          {
            isRecommendation && (
              <span>
                Código:{" "}
                <span class="text-foreground">
                  {(contentData as Recommendations).code}
                </span>
              </span>
            )
          }
        </div>
      </div>
    </div>
    <div class="flex items-center flex-wrap gap-2 mt-6 sm:mt-8">
      <Pill variant="blue" size="sm" icon={primaryPillIcon} className="">
        {contentTypeLabel}
      </Pill>
      <Pill variant="green" size="sm" icon={secondaryPillIcon} className="">
        {contentData.readtime} Minutos de lectura
      </Pill>
      {
        isRecommendation && (
          <Pill variant="orange" size="sm" className="">
            Calificación: {(contentData as Recommendations).qualification} / 5
          </Pill>
        )
      }
      {
        tags.map((tag: string) => (
          <Pill variant="ghost_red" size="sm" className="">
            {tag}
          </Pill>
        ))
      }
    </div>
  </header>
  <!-- Sección de contenido principal -->
  <article class="border border-border rounded-md overflow-hidden min-w-0">
    <div class="px-4 sm:px-6 py-6 sm:py-8">
      <div
        class="max-w-none text-foreground leading-relaxed content-markdown overflow-hidden break-words"
      >
        <slot />
      </div>
    </div>
  </article>
  <!-- Sección de navegación -->
  <section class="mt-6">
    <div class="border border-border rounded-md p-4 sm:p-6">
      <div
        class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4"
      >
        <div class="min-w-0 flex-1">
          <h3 class="text-lg font-semibold text-foreground mb-2 break-words">
            {finalNavigationSection.title}
          </h3>
          <p class="text-sm text-muted-foreground break-words">
            {finalNavigationSection.description}
          </p>
        </div>
        <div class="flex gap-3 flex-shrink-0">
          <a
            href={finalNavigationSection.buttonHref}
            class="inline-flex items-center px-4 py-2 border border-border bg-background hover:bg-muted transition-colors rounded-md text-sm font-medium text-foreground whitespace-nowrap"
          >
            {finalNavigationSection.buttonText}
          </a>
        </div>
      </div>
    </div>
  </section>
</div>
